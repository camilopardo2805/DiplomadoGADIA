{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNBT8/Uz8bIeO9fOfF2E7xi",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/camilopardo2805/DiplomadoGADIA/blob/main/Bucle\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qSgtqET1W6tq"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "Bucles_y_ciclos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "id": "4cacoaN3XGjE",
        "outputId": "357456c3-3fb6-433d-97a1-c014f10bba7c"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'Bucles_y_ciclos' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-0c25898ebaaa>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mBucles_y_ciclos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'Bucles_y_ciclos' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Introducción a python\n",
        "\n",
        "Diplomado en Gobierno y Analitica de Datos\n",
        "\n",
        "Fundacion Universitaria Cafam\n",
        "\n",
        "Docente: Nicolas Mojica Gomez\n",
        "\n",
        "Estudiante: Camilo Andres Pardo Mercado\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "-IIkSdJMXIRk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "##for"
      ],
      "metadata": {
        "id": "Y6E5qq7ibmff"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#imprimir todos los numero de una secuencia de datos\n",
        "\n",
        "secuencia=[1,2,3,4,5]\n",
        "\n",
        "for i in secuencia:\n",
        "  print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E_drFTzcboq2",
        "outputId": "1372908b-ad6f-4df6-f533-e78ca29b2367"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#clasificar los numeros que son parte y los que no son pares de la linea secuencia\n",
        "\n",
        "for i in secuencia:\n",
        "  if i % 2 == 0:\n",
        "    print(f\"el numero {i} es par\")\n",
        "  else:\n",
        "    print(f\"el numero {i} es impar\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gYOPooLXc7NJ",
        "outputId": "d1e8255f-4d17-415b-a257-578047690c7c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "el numero 1 es impar\n",
            "el numero 2 es par\n",
            "el numero 3 es impar\n",
            "el numero 4 es par\n",
            "el numero 5 es impar\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Supongamos que tienes una lista de precios de productos y quieres aplicar un descuento del 10% a cada precio\n",
        "precio = [100,150,200,250,300]\n",
        "precio_con_descuento = []\n",
        "\n",
        "\n",
        "for i in precio:\n",
        "    nuevo_precio = i*0.9\n",
        "    precio_con_descuento.append(nuevo_precio)\n",
        "    print(f\"Precio full es: {i}, pero con descuento es: {nuevo_precio}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VwMnK1toeoMQ",
        "outputId": "7234af56-0da8-41d9-f20e-101622a7fa41"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precio full es: 100, pero con descuento es: 90.0\n",
            "Precio full es: 150, pero con descuento es: 135.0\n",
            "Precio full es: 200, pero con descuento es: 180.0\n",
            "Precio full es: 250, pero con descuento es: 225.0\n",
            "Precio full es: 300, pero con descuento es: 270.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precio_con_descuento"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "keJTISkPidI8",
        "outputId": "1fb660e4-c552-4ca3-c8b8-8356c14bfdf8"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[90.0, 135.0, 180.0, 225.0, 270.0]"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4oP8OpVOkOHe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Bucle while se utiliza para repetir un bloque de codigo mientras una condicion sea verdadera"
      ],
      "metadata": {
        "id": "iKtMYB6sopbC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# si agamoto destruye el planeta strege viene a negociar\n",
        "\n",
        "while #condicion\n",
        "  # codigo a ejecutar"
      ],
      "metadata": {
        "id": "tf3-hVOooq93"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pregunta = input (\"¿quieres destruir el planeta?\")\n",
        "while pregunta ==\"si\":\n",
        "      print(:\"ven venido a negociar\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "IBP_SD--pMWn",
        "outputId": "003986f2-257c-4c3b-a9ed-2b9c125ea132"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-18-1b89954bb1e1>, line 3)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-18-1b89954bb1e1>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    print(:\"ven venido a negociar\")\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# construir un contador que vaya hasta 5 y cuanto la variable tenga este valor, deje de contar\n",
        "\n",
        "contador = 0\n",
        "while contador <5:\n",
        "      print(contador)\n",
        "      contador+=1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Vyuhxyfqg4U",
        "outputId": "282e92a0-a780-4ce3-8a91-5890c963c128"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "u1cPNfKFsMPk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Supongamos que quiere solicitar un usuario que ingrese una contraseña hasta que lo haga correctamente\n",
        "\n",
        "break: Sale del bucle antes de que se evalúe la condición o se termine de iterar sobre la secuencia.\n",
        "continue: Salta el resto del código dentro del bucle y vuelve a la condición o a la siguiente iteración.\n",
        "else: Se ejecuta una vez cuando el bucle termina, a menos que se haya interrumpido con break.\n",
        "tiene menú contextual"
      ],
      "metadata": {
        "id": "IdBL8zt6st-y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "contraseña_correcta=\"segura123\"\n",
        "intentos = 3\n",
        "\n",
        "while intentos >0:\n",
        "      contraseña = input (\"introduce tu contraseña: \")\n",
        "      if contraseña == contraseña_correcta:\n",
        "        print(\"acceso concedido\")\n",
        "        break\n",
        "      else :\n",
        "        intentos-=1\n",
        "        print(f\"contraseña incorrecta, te quedan {intentos} intentos\")\n",
        "if intentos == 0:\n",
        "  print(\"ya no te quedan intentos\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DNY2_H00tfH1",
        "outputId": "9a0e04b0-1911-4c5d-c457-9ed75ba48a0f"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "introduce tu contraseña: dddd\n",
            "contraseña incorrecta, te quedan 2intentos\n",
            "introduce tu contraseña: ssss\n",
            "contraseña incorrecta, te quedan 1intentos\n",
            "introduce tu contraseña: jjj\n",
            "contraseña incorrecta, te quedan 0intentos\n",
            "ya no te quedan intentos\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Escribe un programa que permita al usuario adivinar un número secreto entre 1 y 10.\n",
        "El programa debe seguir pidiendo al usuario que adivine hasta que acierte.\n",
        "\n",
        "numero_correcto = 6\n",
        "intento=0\n",
        " while true:\n",
        "   intento= int (imput(\"escriba tu numero\"))\n",
        "   if intento >=1 and intento <=10 :\n",
        "    if intento == numero_correcto:\n",
        "      print(f\"felicidades: {intento} era el numero secreto\")\n",
        "      break\n",
        "   else:\n",
        "    print(\"sigue intentado\")\n",
        "  else:\n",
        "    print(\"el numero no esta en el rango permitido\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "M-ul3yj3vJxg",
        "outputId": "fb3807bd-d956-4b5f-f094-32d1fe2bca70"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "unindent does not match any outer indentation level (<tokenize>, line 14)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m14\u001b[0m\n\u001b[0;31m    else:\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6_BzjHR10L_j"
      },
      "execution_count": 24,
      "outputs": []
    }
  ]
}